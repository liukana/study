// Generated by Dagger (https://google.github.io/dagger).
package com.example.admin.accessibilityservicetest.dagger2;

import dagger.internal.Preconditions;

public final class DaggerTestComponent implements TestComponent {
  private TestModule testModule;

  private DaggerTestComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  public static TestComponent create() {
    return new Builder().build();
  }

  private Animal getAnimal() {
    return new Animal(TestModule_ProvideNewHostFactory.proxyProvideNewHost(testModule));
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.testModule = builder.testModule;
  }

  @Override
  public void inject(DaggerTestActivity daggerTestActivity) {
    injectDaggerTestActivity(daggerTestActivity);
  }

  private DaggerTestActivity injectDaggerTestActivity(DaggerTestActivity instance) {
    DaggerTestActivity_MembersInjector.injectAnimal(instance, getAnimal());
    return instance;
  }

  public static final class Builder {
    private TestModule testModule;

    private Builder() {}

    public TestComponent build() {
      if (testModule == null) {
        this.testModule = new TestModule();
      }
      return new DaggerTestComponent(this);
    }

    public Builder testModule(TestModule testModule) {
      this.testModule = Preconditions.checkNotNull(testModule);
      return this;
    }
  }
}
